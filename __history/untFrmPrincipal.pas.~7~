unit untFrmPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, AdvPanel, System.StrUtils,
  System.Types;

type
  TFrmPrincipal = class(TForm)
    mmoEnviar: TMemo;
    mmoReceber: TMemo;
    AdvPanel1: TAdvPanel;
    Label1: TLabel;
    btnEnviar: TButton;
    lblEnviar: TLabel;
    lblReceber: TLabel;
    btnCopiar: TButton;
    OpenDialog1: TOpenDialog;
    btnAbrirArquivo: TButton;
    procedure btnEnviarClick(Sender: TObject);
    procedure btnCopiarClick(Sender: TObject);
    procedure btnAbrirArquivoClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FrmPrincipal: TFrmPrincipal;

implementation

{$R *.dfm}

procedure TFrmPrincipal.btnAbrirArquivoClick(Sender: TObject);
begin
  if OpenDialog1.Execute then
  begin
    mmoEnviar.Lines.LoadFromFile(OpenDialog1.FileName, TEncoding.UTF8);
  end
    else
    begin
      ShowMessage('Não foi possível carregar o arquivo');
    end;
end;

procedure TFrmPrincipal.btnCopiarClick(Sender: TObject);
begin
  ShowMessage('copiar');
end;

procedure TFrmPrincipal.btnEnviarClick(Sender: TObject);
var
  texto: String;
  resultado: String;
  linha, letra: String;
  I, J: Integer;
  linhaQtd: Integer;

  id: Integer;

  nome, cpfCnpj,
  nomeFantasia, RG,
  telefone, celular,
  logradouro, email,
  complemento, bairro,
  cep, cidade,
  numero, tipoPessoa: String;


  tmpString: String;
  tmpString2: String;
  tmpArray: array of String;

  linhas: array of String;

  stringSeparada: TStringDynArray;
  enderecoArray: TStringDynArray;
begin
  texto := mmoEnviar.Text;

  Try
    try
      linhaQtd := 1;
      for I := 0 to (mmoEnviar.Lines.Count -1) do
      begin
        linha := mmoEnviar.Lines[I];
        if (mmoEnviar.Lines.Count > 0) and ((Trim(linha) = '') or (linhaQtd > 6)) then
        begin
          linhaQtd := 1;
          Continue;
        end;

        case linhaQtd of
          1:
          begin
            id := StrToIntDef(SplitString(linha, ' ')[0], 0);
            nome := linha.Substring(intToStr(id).Length);
          end;

          2:
          begin
            cpfCnpj := Trim(StringReplace(linha, 'CPF/CNPJ:', '', [rfReplaceAll, rfIgnoreCase]));
          end;

          3:
          begin
            nomeFantasia := linha;
          end;

          4:
          begin
            tmpString := StringReplace(linha, 'RG/I.E:', '', [rfReplaceAll, rfIgnoreCase]);
            tmpString := StringReplace(tmpString, 'Fone:', '', [rfReplaceAll, rfIgnoreCase]);
            RG := SplitString(tmpString, ' ')[0];
            telefone := SplitString(tmpString, ' ')[1];
          end;

          5:
          begin
            tmpString := StringReplace(linha, 'Celular:', '', [rfReplaceAll, rfIgnoreCase]);
            tmpString := StringReplace(tmpString, 'E-Mail:', '', [rfReplaceAll, rfIgnoreCase]);
            celular := SplitString(tmpString, ' ')[0];
            email := SplitString(tmpString, ' ')[1];
          end;

          6:
          begin
            tmpString := StringReplace(linha, 'Endereço:', '', [rfReplaceAll, rfIgnoreCase]);
            enderecoArray := SplitString(tmpString, ',');

            tmpString2 := TrimLeft(enderecoArray[0]);

            stringSeparada := SplitString(tmpString2, ' ');

            logradouro := '';
            for J := 0 to Length(stringSeparada)-2 do
            begin
              logradouro := logradouro + ' ' + stringSeparada[J];
            end;

            numero := stringSeparada[Length(stringSeparada)-1];

            complemento := enderecoArray[1];
            bairro := enderecoArray[2];
            cep := enderecoArray[3];
            cidade := enderecoArray[4];
          end;
        end;

        if linhaQtd = 6 then
        begin
          if cpfCnpj.Length > 11 then
          begin
            tipoPessoa := 'J';
          end
            else
            begin
              tipoPessoa := 'F';
            end;

          nome := Trim(nome);
          complemento := Trim(complemento);
          cpfCnpj := Trim(cpfCnpj);
          complemento := Trim(complemento);
          logradouro := Trim(logradouro);
          numero := Trim(numero);
          bairro := Trim(bairro);
          cep := Trim(cep);
          cidade := Trim(cidade);

          nome := IfThen(nome.IsEmpty, 'NULL', QuotedStr(nome));
          complemento := IfThen(complemento.IsEmpty, 'NULL', QuotedStr(complemento));
          cpfCnpj := IfThen(cpfCnpj.IsEmpty, 'NULL', QuotedStr(cpfCnpj));
          logradouro := IfThen(logradouro.IsEmpty, 'NULL', QuotedStr(logradouro));
          numero := IfThen(numero.IsEmpty, 'NULL', QuotedStr(numero));
          bairro := IfThen(bairro.IsEmpty, 'NULL', QuotedStr(bairro));
          cep := IfThen(cep.IsEmpty, 'NULL', QuotedStr(cep));
          cidade := IfThen(cidade.IsEmpty, 'NULL', QuotedStr(cidade));


          mmoReceber.Lines.Add('INSERT INTO clients (ID, NAME, CPF/CNPJ, PERSON_TYPE, FANTASY_NICKNAME, public_place, street_number, complement, district, zipcode, cidade) VALUES ('+
          IfThen(id > 0, IntToStr(id), 'NULL') + ', ' + nome + ', ' + cpfCnpj + ', ' + QuotedStr(tipoPessoa) + ', ' + logradouro + ', ' + numero + ', ' + complemento + ', ' + bairro + ', ' + cep + ', ' + cidade +');');
        end;

        linhaQtd := linhaQtd + 1;
      end;
    except

    end;


  Finally

  End;
end;

end.
